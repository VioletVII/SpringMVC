<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- MyBatis中可以面向接口操作数据，要保证两个一致
mapper接口的全类名和映射文件的命名空间（namespace）保持一致
mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致-->
<mapper namespace="mappers.DynamicSQLMapper">

<!--
1.if标签可通过test属性（即传递过来的数据）的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行
在where后面添加一个恒成立条件1=1
    这个恒成立条件并不会影响查询的结果
    这个1=1可以用来拼接and语句，例如：当empName为null时
        如果不加上恒成立条件，则SQL语句为select * from t_emp where and age = ? and sex = ? and email = ?，此时where会与and连用，SQL语句会报错
        如果加上一个恒成立条件，则SQL语句为select * from t_emp where 1= 1 and age = ? and sex = ? and email = ?，此时不报错

2.where和if一般结合使用：
若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字
若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and/or去掉
<注意> where标签不能去掉条件后多余的and/or

3.trim用于去掉或添加标签中的内容
常用属性
prefix：在trim标签中的内容的前面添加某些内容
suffix：在trim标签中的内容的后面添加某些内容
prefixOverrides：在trim标签中的内容的前面去掉某些内容
suffixOverrides：在trim标签中的内容的后面去掉某些内容
若trim中的标签都不满足条件，则trim标签没有任何效果，也就是只剩下select * from t_emp

4.choose、when、otherwise
choose、when、otherwise相当于if...else if..else
when至少要有一个，otherwise至多只有一个

5.foreach属性：
collection：设置要循环的数组或集合
item：表示集合或数组中的每一个数据
separator：设置循环体之间的分隔符，分隔符前后默认有一个空格，如,
open：设置foreach标签中的内容的开始符
close：设置foreach标签中的内容的结束符

6.SQL片段
sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入
声明sql片段：<sql>标签
引用sql片段：<include>标签
-->

    <!--List<Employee> getEmployeeByChoose(Employee employee);-->
    <select id="getEmployeeByChoose" resultType="Employee">
        select * from t_emp
        <where>
            <choose>
                <when test="empName !=null and empName !='' ">
                    emp_name=#{empName}
                </when>
                <when test="age !=null and age !='' ">
                    age=#{age}
                </when>
                <when test="email !=null and email !='' ">
                    email=#{email}
                </when>
            </choose>
        </where>
    </select>

    <!--int deleteMoreByArray(@Param("ids") Integer[] ids);-->
    <delete id="deleteMoreByArray">
        delete from t_emp where id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>
    <!--int insertMoreByArray(@Param("emps") List<Employee> employees);-->
    <insert id="insertMoreByArray">
        insert into t_emp values
        <foreach collection="emps" item="employee" separator=",">
            (null ,#{employee.empName},#{employee.age},#{employee.email},1)
        </foreach>
    </insert>

    <sql id="empColumns">id,emp_name,age,email</sql>


    <!--List<Employee> getEmployeeByCondition(Employee employee);-->
    <select id="getEmployeeByCondition" resultType="Employee">
        select <include refid="empColumns"></include> from t_emp
        <trim prefix="where" suffixOverrides="and|or">
            <if test="empName !=null and empName !='' ">
                emp_name=#{empName} and
            </if>
            <if test="age !=null and age !='' ">
                 age=#{age} or
            </if>
            <if test="email !=null and email !='' ">
                 email=#{email}
            </if>
        </trim>
    </select>

    <select id="getEmployeeByConditionTwo" resultType="Employee">
        select * from t_emp
        <where>
            <if test="empName !=null and empName !='' ">
                emp_name=#{empName}
            </if>
            <if test="age !=null and age !='' ">
                and age=#{age}
            </if>
            <if test="email !=null and email !='' ">
                and email=#{email}
            </if>
        </where>
    </select>

    <select id="getEmployeeByConditionOne" resultType="Employee">
        select * from t_emp where 1=1
        <if test="empName !=null and empName !='' ">
            and emp_name=#{empName}
        </if>
        <if test="age !=null and age !='' ">
            and age=#{age}
        </if>
        <if test="email !=null and email !='' ">
            and email=#{email}
        </if>
    </select>
</mapper>