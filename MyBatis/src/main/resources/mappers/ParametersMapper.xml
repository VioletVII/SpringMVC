<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- MyBatis中可以面向接口操作数据，要保证两个一致
mapper接口的全类名和映射文件的命名空间（namespace）保持一致
mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致-->
<mapper namespace="mappers.ParametersMapper">
    <!--List<User> getAllUsers();-->
    <select id="getAllUsers" resultType="User">
        select * from t_user;
    </select>
<!--
MyBatis获取参数值的两种方式：${}和#{}
${}的本质就是字符串拼接，#{}的本质就是占位符赋值
${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；
但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号
1.单个字面量类型的参数:
若mapper接口中的方法参数为单个的字面量类型,
此时可以使用${}和#{}以任意的名称（最好见名识意）获取参数的值，注意${}需要手动加单引号

2.多个字面量类型的参数:
若mapper接口中的方法参数为多个时，此时MyBatis会自动将这些参数放在一个map集合中
    a.以arg0,arg1…为键，以参数为值；
    b.以param1,param2…为键，以参数为值；
因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号。
使用arg或者param都行，要注意的是，arg是从arg0开始的，param是从param1开始的

3.map集合类型的参数:
若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，
将这些数据放在map中只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号

4.实体类类型的参数:
若mapper接口中的方法参数为实体类对象时此时可以使用${}和#{}，
通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号

5.使用@Param标识参数:(常用)
可以通过@Param注解标识mapper接口中的方法参数，此时，会将这些参数放在map集合中
    a.以@Param注解的value属性值为键，以参数为值
    b.以param1,param2…为键，以参数为值；
只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号
-->

    <!--User getUserByUsername(String username);-->
    <select id="getUserByUsername" resultType="User">
        <!--select * from t_user where username=#{username}-->
        select * from t_user where username='${username}'
    </select>
    <!--User checkLogin(String username,String password);-->
    <select id="checkLogin" resultType="User">
        <!--select * from t_user where username=#{arg0} and password=#{arg1};-->
        select * from t_user where username='${param1}' and password='${param2}';
    </select>
    <!--User checkLoginByMap(Map<String,Object> map);-->
    <select id="checkLoginByMap" resultType="User">
        select * from t_user where username=#{username} and password=#{password};
    </select>
    <!--int insertUser(User user);-->
    <insert id="insertUser">
        insert into t_user values (null ,#{username},#{password},#{email})
    </insert>

    <!--User checkLoginByParams(@Param("username")String username,@Param("password")String password);-->
    <select id="checkLoginByParams" resultType="user">
        select * from t_user where username=#{username} and password=#{password};
    </select>
</mapper>