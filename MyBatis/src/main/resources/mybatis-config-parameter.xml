<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--引入properties资源-->
    <properties resource="jdbc.properties"/>
    <settings>
        <!--mapUnderscoreToCamelCase，可以在查询表中数据时，自动将_类型的字段名转换为驼峰
        emp_name转成empName
        -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!--开启延迟加载
分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：
lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载
aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载
此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。此时可通过association和collection中的fetchType属性设置当前的分步查询是否使用延迟加载，fetchType=“lazy(延迟加载)|eager(立即加载)”
-->
        <setting name="lazyLoadingEnabled" value="true"/>
    </settings>
    <!--设置类的别名-->
    <typeAliases>
        <!--<typeAlias type="Bean.Employee" alias="employee"/>-->
        <package name="Bean" />
    </typeAliases>
    <!--environments：设置多个连接数据库的环境-->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--引入映射文件-->
    <mappers>
<!--        <mapper resource="mappers/ParametersMapper.xml"></mapper>-->
        <package name="mappers"/>
        <!--
        1. 此方式必须保证mapper接口和mapper映射文件必须在相同的包下
        2. mapper接口要和mapper映射文件的名字一致
        -->
    </mappers>
</configuration>